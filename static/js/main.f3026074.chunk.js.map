{"version":3,"sources":["utilities.js","App.js","reportWebVitals.js","index.js"],"names":["drawMesh","predictions","ctx","length","forEach","prediction","keypoints","scaledMesh","i","x","y","beginPath","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","runFacemesh","a","facemesh","inputResolution","width","height","scale","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","estimateFaces","face","console","log","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ZAsBaA,EAAW,SAACC,EAAaC,GAChCD,EAAYE,OAAS,GACvBF,EAAYG,SAAQ,SAACC,GAEnB,IADA,IAAMC,EAAYD,EAAWE,WACpBC,EAAI,EAAGA,EAAIF,EAAUH,OAAQK,IAAK,CACzC,IAAMC,EAAIH,EAAUE,GAAG,GACjBE,EAAIJ,EAAUE,GAAG,GACvBN,EAAIS,YACJT,EAAIU,IAAIH,EAAGC,EAAG,EAAG,EAAG,EAAIG,KAAKC,IAC7BZ,EAAIa,UAAY,OAChBb,EAAIc,YCuDGC,MAhFf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAW,uCAAG,4BAAAC,EAAA,sEACAC,IAAc,CAC9BC,gBAAiB,CAAEC,MAAO,IAAKC,OAAQ,KACvCC,MAAO,KAHS,OACZC,EADY,OAKlBC,aAAY,WACVC,EAAOF,KACN,KAPe,2CAAH,qDAWXE,EAAM,uCAAG,WAAOF,GAAP,uBAAAN,EAAA,yDAEkB,qBAAtBJ,EAAUa,SACK,OAAtBb,EAAUa,SAC6B,IAAvCb,EAAUa,QAAQC,MAAMC,WAJb,wBAOLD,EAAQd,EAAUa,QAAQC,MAC1BE,EAAahB,EAAUa,QAAQC,MAAME,WACrCC,EAAcjB,EAAUa,QAAQC,MAAMG,YAG5CjB,EAAUa,QAAQC,MAAMP,MAAQS,EAChChB,EAAUa,QAAQC,MAAMN,OAASS,EAGjCf,EAAUW,QAAQN,MAAQS,EAC1Bd,EAAUW,QAAQL,OAASS,EAjBhB,UAoBQP,EAAIQ,cAAcJ,GApB1B,QAoBLK,EApBK,OAqBXC,QAAQC,IAAIF,GAENnC,EAAMkB,EAAUW,QAAQS,WAAW,MACzCxC,EAASqC,EAAMnC,GAxBJ,4CAAH,sDA4BZ,OADAmB,IAEE,qBAAKoB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,IAAD,CACEC,IAAKxB,EACLyB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzB,MAAO,IACPC,OAAQ,OAGZ,wBACEgB,IAAKtB,EACLuB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzB,MAAO,IACPC,OAAQ,aCnELyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3026074.chunk.js","sourcesContent":["import { complex } from \"@tensorflow/tfjs\";\r\n\r\n// Triangulation metrics\r\nexport const TRIANGULATION = [];\r\n// Draw triangle\r\nconst drawPath = (ctx, points, closePath) =>{\r\n    const region = new Path2D();\r\n    region.moveTo(points[0][0], points[0][1]);\r\n    for(let i = 1 ; i< points.length; i++){\r\n        const point = points[i];\r\n        region.lineTo(point[0], point[1]);\r\n    }\r\n\r\n    if(closePath){\r\n        region.closePath();\r\n    }\r\n    ctx.strokeStyle = \"pink\";\r\n    ctx.stroke(region);\r\n}\r\n\r\n// Draw the points\r\n\r\nexport const drawMesh = (predictions, ctx) => {\r\n  if (predictions.length > 0) {\r\n    predictions.forEach((prediction) => {\r\n      const keypoints = prediction.scaledMesh;\r\n      for (let i = 0; i < keypoints.length; i++) {\r\n        const x = keypoints[i][0];\r\n        const y = keypoints[i][1];\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, 1, 0, 3 * Math.PI);\r\n        ctx.fillStyle = \"aqua\";\r\n        ctx.fill();\r\n      }\r\n    });\r\n  }\r\n};\r\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport Webcam from \"react-webcam\";\nimport {drawMesh} from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Load Facemesh\n  const runFacemesh = async () => {\n    const net = await facemesh.load({\n      inputResolution: { width: 640, height: 480 },\n      scale: 0.8,\n    });\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  // Detect function\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make detections\n      const face = await net.estimateFaces(video);\n      console.log(face);\n      // Get canvas context for drawing\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawMesh(face, ctx);\n    }\n  };\n  runFacemesh();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}